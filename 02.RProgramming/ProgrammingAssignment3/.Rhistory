colmean(airquality, FALSE)
swirl()
library(swirl)
swirl()
swirl()
1
swirl()
5 == 5\
5 == 5
clear()
info()
x <- 5==5
x <- FALSE==TRUE
swirl()
(x == 1)
(TRUE == TRUE)
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
test
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(int<0)
any(ints<0)
all(ints>0)
exit()
exit
cls
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
func(dat)
func
func(dat)
func
dat
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sum, c(2, 4, 6))
sum
rm(mean)
rm(sum)
rm(median)
rm(floor)
sum
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hello", "r", "programming!")
telegram("hello", "r", "programming!")
submit()
submit()
mad_libs("Bangalore", "cool","bird")
submit()
I %p% love %p& R
"I" %p% "love" %p% R
"I" %p% "love" %p% "R"
I %p% love %p% R
"I" %p% "love" %p% "R"
submi()
submit()
submit()
submit()
submit()
submit()
info()
"%p%"
submit()
"I" %p% "love" %p% "R"
"'I'" %p% "'love'" %p% "'R'"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
5+7
x <- 5 + 7
X
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555)
c(z,555L)
c(z,555,z)
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 1000)
z * 2 + 1000
z * 2 + 1000
my_div
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path()
file.path("testpath")
file.path("mytest3.R")
file.path("folder1\mytest3.R")
file.path("folder1\\mytest3.R")
file.path("folder1", "folder2")
c(1, 2, 3, 4) + c(0, 10)
getwd()
?dir.create()
?dir.create("folder1\folder2",recursive = TRUE)
?dir.create("folder1\\folder2",recursive = TRUE)
?dir.create("folder1","folder2",recursive = TRUE)
?dir.create("folder1",recursive = TRUE)
dir.create("folder1\folder2",recursive = TRUE)
dir.create("folder1\\folder2",recursive = TRUE)
dir.create("folder1","folder2",recursive = TRUE)
dir.create("folder1\folder2",recursive = TRUE)
dir.create("folder1\\folder2",recursive = TRUE)
info()
dir.create("folder1\\folder2",recursive = FALSE)
dir.create("folder1\\folder2",recursive = FALSE)
info()
dir.create("Folder1\\Folder2",recursive = TRUE)
?dir.create
dir.create("testdir2\\testdir3",recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
old.dir
setwd(old.dir)
help.start()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c()
?c
z
c(z, 555)
c(z, 555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) and c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1:20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
my_seq
my_seq.length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect-1
tf <- num_vect<1
tf
num_vect >= 6
my_char <- "My","name","is"
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "TestExam")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x *3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
sum(my_data)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names("foo"")
names("foo")
names("foo")
names(foo)
names(vect)
v2 <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(data=1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
cd <- getwd()
cd
setwd("C:\Users\e527848\Desktop\DS Course\R")
setwd("C:\\Users\\e527848\\Desktop\\DS Course\\R")
getwd()
read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
x
x["ozone"]
x["Ozone"]
x["Ozone" & Month=5]
x["Ozone"] & x["Month"]==5
hw1 = read.csv('hw1_data.csv')
hw1
sub = subset(hw1, Month == 5 & !is.na(Ozone), select = Ozone)
apply(sub, 2, max)
?apply
apply(sub, 1, max)
apply(sub, 3, max)
sub
apply(sub, 2, min)
sub = subset(hw1, Month == 6, select = Ozone)
sub
sub = subset(hw1, Month == 6, select = Temp)
sub
sub[1]
sub[0]
sub[2]
sub[1]
mean(sub)
apply(sub, 2, mean)
sub = subset(hw1, Ozone > 31 & Temp >90, select = Solar.R)
apply(sub, 2, mean)
sub = subset(hw1, !is.na(Ozone), select = Ozone)
apply(sub, 2, mean)
length(is.na(hw1))
sub = subset(hw1, is.na(Ozone))
nrow(sub)
hw1[15,]
hw1[,2]
hw1[1,2]
cd
setwd(cd)
getwd()
getwd()
cd <- getwd()
setwd("C:\Users\e527848\Desktop\DS Course\\R")
setwd("C:\\Users\\e527848\\Desktop\\DS Course\\R")
pollutantme
pollutantmean
pollutantmean
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","sulfate",1:10)
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Select our column
d <- data[,pollutant]
## Ignore NAs
d <- d[!is.na(d)]
## append to our vector
vals <- c(vals, d)
}
filename <- sprintf("%03d.csv", i)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## Get a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialize a vector to hold values
vals <- vector()
## Loop over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Select our column
d <- data[,pollutant]
## Ignore NAs
d <- d[!is.na(d)]
## append to our vector
vals <- c(vals, d)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
complete <- function(directory, id = 1:332) {
## Get a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialize variables
ids <-vector()
counts = vector()
## Loop over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Store the id
ids <- c(ids, i)
## Calculate and store the count of complete cases
completeCases <- data[complete.cases(data),]
counts <- c(counts, nrow(completeCases))
}
## Return the data frame
data.frame(id=ids, nobs=counts)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
class(cc)
cc
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
corr <- function(directory, threshold = 0) {
completes <- complete(directory, 1:332)
completes <- subset(completes, nobs > threshold )
## Initialize variables
correlations <- vector()
## Loop over the passed id's
for(i in completes$id ) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Calculate and store the count of complete cases
completeCases <- data[complete.cases(data),]
count <- nrow(completeCases)
## Calculate and store the count of complete cases
## if threshhold is reached
if( count >= threshold ) {
correlations <- c(correlations, cor(completeCases$nitrate, completeCases$sulfate) )
}
}
## Return a numeric vector of correlations
correlations
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
vector()
vector(1)
vector(2)
vector(0)
vector("test")
cd
